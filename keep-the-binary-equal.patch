From c31020cc5a6f503739cb6998ab2b8b9f8440e3c9 Mon Sep 17 00:00:00 2001
From: zhangyipeng <zhangyipeng7@huawei.com>
Date: Thu, 4 Mar 2021 09:16:31 +0800
Subject: [PATCH] [Huawei]keep the binary equal



Signed-off-by: Zhou Yong  <zhouyong44@huawei.com>
---
 common/autoconf/flags.m4                                    | 2 +-
 common/autoconf/generated-configure.sh                      | 2 +-
 .../com/sun/tools/corba/se/idl/toJavaPortable/Util.java     | 3 ---
 .../share/classes/com/sun/tools/corba/se/logutil/MC.java    | 1 -
 jdk/make/CompileLaunchers.gmk                               | 6 +++---
 jdk/make/lib/CoreLibraries.gmk                              | 2 +-
 .../build/tools/generatecharacter/GenerateCharacter.java    | 3 ---
 7 files changed, 6 insertions(+), 13 deletions(-)

diff --git a/common/autoconf/flags.m4 b/common/autoconf/flags.m4
index 077efa297..838a76734 100644
--- a/common/autoconf/flags.m4
+++ b/common/autoconf/flags.m4
@@ -686,7 +686,7 @@ AC_DEFUN_ONCE([FLAGS_SETUP_COMPILER_FLAGS_FOR_JDK],
       LDFLAGS_JDK="$LDFLAGS_JDK -safeseh"
     fi
     # TODO: make -debug optional "--disable-full-debug-symbols"
-    LDFLAGS_JDK="$LDFLAGS_JDK -debug"
+    LDFLAGS_JDK="$LDFLAGS_JDK"
     LDFLAGS_JDKLIB="${LDFLAGS_JDK} -dll -libpath:${JDK_OUTPUTDIR}/lib"
     LDFLAGS_JDKLIB_SUFFIX=""
     if test "x$OPENJDK_TARGET_CPU_BITS" = "x64"; then
diff --git a/common/autoconf/generated-configure.sh b/common/autoconf/generated-configure.sh
index 93d0fbdcb..03872a3c9 100644
--- a/common/autoconf/generated-configure.sh
+++ b/common/autoconf/generated-configure.sh
@@ -42154,7 +42154,7 @@ $as_echo "$supports" >&6; }
       LDFLAGS_JDK="$LDFLAGS_JDK -safeseh"
     fi
     # TODO: make -debug optional "--disable-full-debug-symbols"
-    LDFLAGS_JDK="$LDFLAGS_JDK -debug"
+    LDFLAGS_JDK="$LDFLAGS_JDK"
     LDFLAGS_JDKLIB="${LDFLAGS_JDK} -dll -libpath:${JDK_OUTPUTDIR}/lib"
     LDFLAGS_JDKLIB_SUFFIX=""
     if test "x$OPENJDK_TARGET_CPU_BITS" = "x64"; then
diff --git a/corba/src/share/classes/com/sun/tools/corba/se/idl/toJavaPortable/Util.java b/corba/src/share/classes/com/sun/tools/corba/se/idl/toJavaPortable/Util.java
index 7e0d8373d..b5da891d6 100644
--- a/corba/src/share/classes/com/sun/tools/corba/se/idl/toJavaPortable/Util.java
+++ b/corba/src/share/classes/com/sun/tools/corba/se/idl/toJavaPortable/Util.java
@@ -1129,7 +1129,6 @@ public class Util extends com.sun.tools.corba.se.idl.Util
         Util.getMessage ("Version.product", Util.getMessage ("Version.number"))));
     // <d48911> Do not introduce invalid escape characters into comment! <daz>
     //stream.println ("* " + Util.getMessage ("toJavaProlog2", Compile.compiler.arguments.file));
-    stream.println ("* " + Util.getMessage ("toJavaProlog2", Compile.compiler.arguments.file.replace (File.separatorChar, '/')));
 
     ///////////////
     // This SHOULD work, but there's a bug in the JDK.
@@ -1146,8 +1145,6 @@ public class Util extends com.sun.tools.corba.se.idl.Util
     else
       formatter.setTimeZone (java.util.TimeZone.getDefault ());
 
-    stream.println ("* " + formatter.format (new Date ()));
-
     // <daz>
     ///////////////
 
diff --git a/corba/src/share/classes/com/sun/tools/corba/se/logutil/MC.java b/corba/src/share/classes/com/sun/tools/corba/se/logutil/MC.java
index b2fd98a52..1a6f80359 100644
--- a/corba/src/share/classes/com/sun/tools/corba/se/logutil/MC.java
+++ b/corba/src/share/classes/com/sun/tools/corba/se/logutil/MC.java
@@ -154,7 +154,6 @@ public class MC {
                   groupName);
     pw.println("//");
     pw.printMsg("// Generated by MC.java version @, DO NOT EDIT BY HAND!", VERSION);
-    pw.printMsg("// Generated from input file @ on @", inFile, new Date());
     pw.println();
   }
 
diff --git a/jdk/make/CompileLaunchers.gmk b/jdk/make/CompileLaunchers.gmk
index 9bd19ae91..baaea8a99 100644
--- a/jdk/make/CompileLaunchers.gmk
+++ b/jdk/make/CompileLaunchers.gmk
@@ -490,9 +490,9 @@ UNPACKEXE_DEBUG_SYMBOLS := true
 # It's also linked incrementally, producing a .ilk file that needs to
 # be kept away.
 ifeq ($(OPENJDK_TARGET_OS), windows)
-  BUILD_UNPACKEXE_LDEXE := $(CC)
+  BUILD_UNPACKEXE_LDEXE := $(LD)
   EXE_OUT_OPTION_save := $(EXE_OUT_OPTION)
-  EXE_OUT_OPTION := -Fe
+  EXE_OUT_OPTION := -out:
   # With the current way unpack200 is built, debug symbols aren't supported
   # anyway.
   UNPACKEXE_DEBUG_SYMBOLS :=
@@ -520,7 +520,7 @@ $(eval $(call SetupNativeCompilation,BUILD_UNPACKEXE, \
     CFLAGS_macosx := -fPIC, \
     MAPFILE := $(UNPACK_MAPFILE),\
     LDFLAGS := $(UNPACKEXE_ZIPOBJS), \
-    LDFLAGS_windows := $(CXXFLAGS_JDKEXE), \
+    LDFLAGS_windows := -incremental, \
     LDFLAGS_posix := $(LDFLAGS_JDKEXE) $(LDFLAGS_CXX_JDK) \
         $(call SET_SHARED_LIBRARY_NAME,$(LIBRARY_PREFIX)unpack$(SHARED_LIBRARY_SUFFIX)) \
         $(call SET_SHARED_LIBRARY_ORIGIN), \
diff --git a/jdk/make/lib/CoreLibraries.gmk b/jdk/make/lib/CoreLibraries.gmk
index 75886a628..afcebcb35 100644
--- a/jdk/make/lib/CoreLibraries.gmk
+++ b/jdk/make/lib/CoreLibraries.gmk
@@ -331,7 +331,7 @@ $(eval $(call SetupNativeCompilation,BUILD_LIBUNPACK, \
     MAPFILE := $(JDK_TOPDIR)/make/mapfiles/libunpack/mapfile-vers, \
     LDFLAGS := $(LDFLAGS_JDKLIB) $(LDFLAGS_CXX_JDK) \
         $(call SET_SHARED_LIBRARY_ORIGIN), \
-    LDFLAGS_windows := -map:$(JDK_OUTPUTDIR)/objs/unpack.map -debug \
+    LDFLAGS_windows := -map:$(JDK_OUTPUTDIR)/objs/unpack.map \
         jvm.lib $(WIN_JAVA_LIB), \
     LDFLAGS_SUFFIX_posix := -ljvm $(LIBCXX) -ljava -lc, \
     OBJECT_DIR := $(JDK_OUTPUTDIR)/objs/libunpack, \
diff --git a/jdk/make/src/classes/build/tools/generatecharacter/GenerateCharacter.java b/jdk/make/src/classes/build/tools/generatecharacter/GenerateCharacter.java
index 83973ef07..fc33a4ef9 100644
--- a/jdk/make/src/classes/build/tools/generatecharacter/GenerateCharacter.java
+++ b/jdk/make/src/classes/build/tools/generatecharacter/GenerateCharacter.java
@@ -691,9 +691,6 @@ OUTER:  for (int i = 0; i < n; i += m) {
         throws FileNotFoundException, IOException {
         BufferedReader in = new BufferedReader(new FileReader(theTemplateFileName));
         PrintWriter out = new PrintWriter(new BufferedWriter(new FileWriter(theOutputFileName)));
-        out.println(commentStart +
-            " This file was generated AUTOMATICALLY from a template file " +
-            new java.util.Date() + commentEnd);
         int marklen = commandMarker.length();
         LOOP: while(true) {
             try {
-- 
2.19.0

