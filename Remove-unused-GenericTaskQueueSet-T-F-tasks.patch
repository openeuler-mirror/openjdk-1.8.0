From bd4fd0ac21f668f9f91e802e73cad0c120ba9df6 Mon Sep 17 00:00:00 2001
Date: Thu, 4 Jun 2020 15:45:47 +0800
Subject: [PATCH] Remove unused GenericTaskQueueSet<T, F>::tasks()

Summary: <gc>: remove unused GenericTaskQueueSet<T, F>::tasks()
LLT: NA
Bug url: NA
---
 hotspot/src/share/vm/utilities/taskqueue.hpp | 12 ------------
 1 file changed, 12 deletions(-)

diff --git a/hotspot/src/share/vm/utilities/taskqueue.hpp b/hotspot/src/share/vm/utilities/taskqueue.hpp
index 5b03ccfa..9a2e2ee2 100644
--- a/hotspot/src/share/vm/utilities/taskqueue.hpp
+++ b/hotspot/src/share/vm/utilities/taskqueue.hpp
@@ -541,8 +541,6 @@ class TaskQueueSetSuper {
 public:
   // Returns "true" if some TaskQueue in the set contains a task.
   virtual bool peek() = 0;
-  // Tasks in queue
-  virtual uint tasks() const = 0;
   virtual size_t tasks() = 0;
 };
 
@@ -576,7 +574,6 @@ public:
   // Returns if stealing succeeds, and sets "t" to the stolen task.
   bool steal(uint queue_num, E& t);
   bool peek();
-  uint tasks() const;
   size_t tasks();
 
   uint size() const { return _n; }
@@ -675,15 +672,6 @@ size_t GenericTaskQueueSet<T, F>::tasks() {
   return n;
 }
 
-template<class T, MEMFLAGS F>
-uint GenericTaskQueueSet<T, F>::tasks() const {
-  uint n = 0;
-  for (uint j = 0; j < _n; j++) {
-    n += _queues[j]->size();
-  }
-  return n;
-}
-
 // When to terminate from the termination protocol.
 class TerminatorTerminator: public CHeapObj<mtInternal> {
 public:
-- 
2.19.0

